{"version":3,"sources":["components/AddItemForm.tsx","components/EditedSpan.tsx","components/Task.tsx","components/Todolist.tsx","state/todolists-reducer.ts","state/tasks-reducer.ts","components/AppWithRedux.tsx","serviceWorker.ts","state/store.ts","index.tsx"],"names":["AddItemForm","React","memo","props","console","log","useState","title","setTitle","error","setError","onAddItem","trim","addItem","TextField","variant","value","onChange","event","currentTarget","onKeyPress","key","label","helperText","IconButton","color","onClick","AddBox","EditedSpan","editMode","setEditMode","activateViewMode","autoFocus","onBlur","changeTitle","Task","onClickHandler","useCallback","removeTask","taskId","todolistId","onChangeHandler","changeTaskStatus","target","checked","onChangeTaskTitle","changeTaskTitle","className","isDone","Checkbox","Delete","Todolist","tasksForTodolist","onAddTask","addTask","id","onChangeTodolistTitle","changeTodolistTitle","onActiveClickHandler","changeFilter","onAllClickHandler","onCompletedClickHandler","filter","tasks","task","removeTodolist","map","Button","initialState","AppWithRedux","todolists","useSelector","state","dispatch","useDispatch","type","RemoveTodolistAC","addTodolist","action","v1","AddTodolistAC","ChangeTodolistTitleAC","ChangeTodolistFilterAC","removeTaskAC","taskName","addTaskAC","changeTaskTitleAC","changeTaskStatusAC","AppBar","position","Toolbar","Typography","Container","fixed","Grid","container","style","padding","spacing","todolist","item","Paper","Boolean","window","location","hostname","match","rootReducer","combineReducers","copyState","find","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.24e45fab.chunk.js","sourcesContent":["import React, {ChangeEvent, useState} from \"react\";\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {AddBox} from \"@material-ui/icons\";\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport const AddItemForm = React.memo(function (props: AddItemFormPropsType) {\r\n    // debugger\r\n    console.log('callAddItemForm')\r\n    let [title, setTitle] = useState('')\r\n    let [error, setError] = useState<string | null>(null)\r\n    const onAddItem = () => {\r\n        if (title.trim() !== '') {\r\n            props.addItem(title)\r\n            setTitle('')\r\n        } else {\r\n            setError('Title is required')\r\n        }\r\n    }\r\n    const onChangeHandler = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(event.currentTarget.value)\r\n    }\r\n    const onKeyPressHandler = (event: React.KeyboardEvent<HTMLInputElement>) => {\r\n        error !== null && setError(null)//?\r\n        event.key === 'Enter' && onAddItem()\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                error={!!error}\r\n                variant={'filled'}\r\n                value={title}\r\n                onChange={onChangeHandler}\r\n                onKeyPress={onKeyPressHandler}\r\n                label={'Title'}\r\n                helperText={error}\r\n            />\r\n            <IconButton\r\n                color={\"primary\"}\r\n                onClick={onAddItem}\r\n            >\r\n                <AddBox/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n})","import React, {ChangeEvent, useState} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\ntype EditedSpanPropsType = {\r\n    value: string\r\n    changeTitle: (title: string) => void\r\n}\r\n\r\nexport const EditedSpan = React.memo(function (props: EditedSpanPropsType) {\r\n    console.log('EditedSpan called')\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [title, setTitle] = useState(props.value)\r\n    let [error, setError] = useState<string | null>(null)\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n        setTitle(props.value)\r\n    }\r\n    const activateViewMode = () => {\r\n        if (title.trim() !== '') {\r\n            setEditMode(false)\r\n        } else {\r\n            setError('Title is required')\r\n        }\r\n    }\r\n    const onChangeHandler = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setError(null)\r\n        setTitle(event.currentTarget.value)\r\n        props.changeTitle(event.currentTarget.value)\r\n    }\r\n    const onKeyPressHandler = (event: React.KeyboardEvent<HTMLInputElement>) => {\r\n        event.key === 'Enter' && activateViewMode()\r\n    }\r\n    return editMode\r\n        ? <TextField\r\n            variant={'standard'}\r\n            value={props.value}\r\n            autoFocus onBlur={activateViewMode}\r\n            onKeyPress={onKeyPressHandler}\r\n            onChange={onChangeHandler}\r\n            error={!!error}\r\n            label={'Title'}\r\n            helperText={error}\r\n        />\r\n        : <span onClick={activateEditMode}>{props.value}</span>\r\n})","import React, {ChangeEvent, useCallback} from \"react\";\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {EditedSpan} from \"./EditedSpan\";\r\nimport {Delete} from \"@material-ui/icons\";\r\n\r\ntype TaskPropsType = {\r\n    taskId: string\r\n    title: string\r\n    isDone: boolean\r\n    todolistId: string\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    changeTaskStatus: (taskId: string, isDone: boolean, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, title: string, todolistId: string) => void\r\n}\r\n\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    console.log(\"Task called\")\r\n\r\n    const onClickHandler = useCallback(() => {\r\n        props.removeTask(props.taskId, props.todolistId)\r\n    }, [props.removeTask, props.taskId, props.todolistId])\r\n    const onChangeHandler = useCallback((event: ChangeEvent<HTMLInputElement>) => {\r\n        props.changeTaskStatus(props.taskId, event.target.checked, props.todolistId)\r\n    }, [props.taskId, props.todolistId, props.changeTaskStatus])\r\n    const onChangeTaskTitle = useCallback((title: string) => {\r\n        props.changeTaskTitle(props.taskId, title, props.todolistId)\r\n    }, [props.changeTaskTitle, props.taskId, props.todolistId])\r\n\r\n    return <div key={props.taskId}\r\n                className={props.isDone ? 'is-done' : ''}>\r\n        <Checkbox\r\n            color={\"primary\"}\r\n            checked={props.isDone}\r\n            onChange={onChangeHandler}\r\n        />\r\n        <EditedSpan value={props.title}\r\n                    changeTitle={onChangeTaskTitle}\r\n        />\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})","import React, {useCallback} from \"react\";\r\nimport {FilterValuesType} from \"./App\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {EditedSpan} from \"./EditedSpan\";\r\nimport {Button, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {Task} from \"./Task\";\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\nexport type PropsType = {\r\n    id: string\r\n    title: string\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (title: string, id: string) => void\r\n    tasks: Array<TaskType>\r\n    addTask: (title: string, id: string) => void\r\n    removeTask: (taskId: string, id: string) => void\r\n    changeTaskStatus: (taskId: string, isDone: boolean, id: string) => void\r\n    changeTaskTitle: (taskId: string, title: string, id: string) => void\r\n    filter: string\r\n    changeFilter: (value: FilterValuesType, id: string) => void\r\n}\r\n\r\nexport const Todolist = React.memo(function (props: PropsType) {\r\n        console.log(\"Todolist called\")\r\n        const onAddTask = useCallback((title: string) => {\r\n            props.addTask(title, props.id)\r\n        }, [props.addTask, props.id])\r\n        const onRemoveTodolist = () => props.removeTodolist(props.id)\r\n        const onChangeTodolistTitle = useCallback((title: string) => {\r\n            props.changeTodolistTitle(title, props.id)\r\n        }, [props.changeTodolistTitle, props.id])\r\n\r\n        const onActiveClickHandler = useCallback(() => {\r\n            props.changeFilter('active', props.id)\r\n        }, [props.changeFilter, props.id])\r\n        const onAllClickHandler = useCallback(() => {\r\n            props.changeFilter('all', props.id)\r\n        }, [props.changeFilter, props.id])\r\n        const onCompletedClickHandler = useCallback(() => {\r\n            props.changeFilter('completed', props.id)\r\n        }, [props.changeFilter, props.id])\r\n\r\n        let tasksForTodolist: Array<TaskType>\r\n        props.filter === 'active'\r\n            ? tasksForTodolist = props.tasks.filter(task => !task.isDone)\r\n            : props.filter === 'completed'\r\n            ? tasksForTodolist = props.tasks.filter(task => task.isDone)\r\n            : tasksForTodolist = props.tasks\r\n        return (\r\n            <div>\r\n                <div>\r\n                    <h3>\r\n                        <EditedSpan value={props.title}\r\n                                    changeTitle={onChangeTodolistTitle}\r\n                        />\r\n                        <IconButton onClick={onRemoveTodolist}>\r\n                            <Delete/>\r\n                        </IconButton>\r\n                    </h3>\r\n                </div>\r\n                <AddItemForm addItem={onAddTask}/>\r\n                {\r\n                    tasksForTodolist.map(task => {\r\n                        return <Task\r\n                            key={task.id}\r\n                            taskId={task.id}\r\n                            title={task.title}\r\n                            isDone={task.isDone}\r\n                            removeTask={props.removeTask}\r\n                            changeTaskStatus={props.changeTaskStatus}\r\n                            changeTaskTitle={props.changeTaskTitle}\r\n                            todolistId={props.id}\r\n                        />\r\n                    })\r\n                }\r\n                <div>\r\n                    <Button\r\n                        variant={props.filter === 'all' ? 'outlined' : 'text'}\r\n                        onClick={onAllClickHandler}\r\n                        color={\"default\"}\r\n                    >All\r\n                    </Button>\r\n                    <Button\r\n                        variant={props.filter === 'active' ? 'outlined' : 'text'}\r\n                        onClick={onActiveClickHandler}\r\n                        color={\"primary\"}\r\n                    >Active\r\n                    </Button>\r\n                    <Button\r\n                        variant={props.filter === 'completed' ? 'outlined' : 'text'}\r\n                        onClick={onCompletedClickHandler}\r\n                        color={\"secondary\"}\r\n                    >Completed\r\n                    </Button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n)\r\n","import {FilterValuesType, TodolistType} from \"../components/App\";\r\nimport {v1} from \"uuid\";\r\n\r\nexport type RemoveTodolistActionType = {\r\n    type: 'REMOVE-TODOLIST',\r\n    todolistId: string\r\n}\r\nexport type AddTodolistActionType = {\r\n    type: 'ADD-TODOLIST',\r\n    title: string\r\n    todolistId: string\r\n}\r\ntype ChangeTodolistTitleActionType = {\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    title: string\r\n    id: string\r\n}\r\ntype ChangeTodolistFilterActionType = {\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    filter: FilterValuesType\r\n    id: string\r\n}\r\ntype ActionType =\r\n    RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ChangeTodolistTitleActionType\r\n    | ChangeTodolistFilterActionType\r\n\r\nconst initialState: Array<TodolistType> = []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistType> = initialState, action: ActionType) => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(todolist => todolist.id !== action.todolistId)\r\n        case 'ADD-TODOLIST':\r\n            return [...state, {\r\n                id: action.todolistId,\r\n                title: action.title,\r\n                filter: \"all\"\r\n            }]\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(todolist => {\r\n                if (todolist.id === action.id) {\r\n                    return {\r\n                        ...todolist,\r\n                        title: action.title\r\n                    }\r\n                } else return todolist\r\n            })\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            let todolist = state.find(todolist => todolist.id === action.id)\r\n            if (todolist) {\r\n                todolist.filter = action.filter\r\n            }\r\n            return [...state]   //как в копии стейта изменился фильтр\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport const RemoveTodolistAC = (todolistId: string): RemoveTodolistActionType => {\r\n    return {type: 'REMOVE-TODOLIST', todolistId: todolistId}\r\n}\r\nexport const AddTodolistAC = (title: string): AddTodolistActionType => {\r\n    return {type: 'ADD-TODOLIST', title: title, todolistId: v1()}\r\n}\r\nexport const ChangeTodolistTitleAC = (title: string, todolistId: string): ChangeTodolistTitleActionType => {\r\n    return {type: 'CHANGE-TODOLIST-TITLE', title: title, id: todolistId}\r\n}\r\nexport const ChangeTodolistFilterAC = (filter: FilterValuesType, todolistId: string): ChangeTodolistFilterActionType => {\r\n    return {type: 'CHANGE-TODOLIST-FILTER', id: todolistId, filter: filter}\r\n}\r\n","import {TaskStateType} from '../components/App';\r\nimport {AddTodolistActionType, RemoveTodolistActionType} from \"./todolists-reducer\";\r\nimport {v1} from \"uuid\";\r\n\r\ntype RemoveTaskActionType = {\r\n    type: 'REMOVE-TASK',\r\n    taskId: string\r\n    todolistId: string\r\n}\r\ntype AddTaskActionType = {\r\n    type: 'ADD-TASK',\r\n    title: string\r\n    todolistId: string\r\n}\r\ntype ChangeTaskStatusActionType = {\r\n    type: 'CHANGE-TASK-STATUS',\r\n    taskId: string\r\n    isDone: boolean\r\n    todolistId: string\r\n}\r\ntype ChangeTaskTitleActionType = {\r\n    type: 'CHANGE-TASK-TITLE',\r\n    taskId: string\r\n    title: string\r\n    todolistId: string\r\n}\r\ntype ActionType =\r\n    RemoveTaskActionType\r\n    | AddTaskActionType\r\n    | ChangeTaskStatusActionType\r\n    | ChangeTaskTitleActionType\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n\r\nconst initialState: TaskStateType = {}\r\n\r\nexport const tasksReducer = (state: TaskStateType = initialState, action: ActionType) => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId]\r\n                    .filter(task => task.id !== action.taskId)\r\n            }\r\n        case 'ADD-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: [...state[action.todolistId],\r\n                    {id: v1(), title: action.title, isDone: false}]\r\n            }\r\n        case 'CHANGE-TASK-STATUS':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId].map(task => {\r\n                    return task.id === action.taskId\r\n                        ? {\r\n                            ...task,\r\n                            isDone: action.isDone\r\n                        }\r\n                        : task\r\n                })\r\n            }\r\n            // let todolistTasks = state[action.todolistId]\r\n            // let task = todolistTasks.find(task => task.id === action.taskId)\r\n            // if (task) {\r\n            //     task.isDone = action.isDone\r\n            // }\r\n            // state[action.todolistId] = [...todolistTasks]\r\n            // return ({...state})\r\n        case 'CHANGE-TASK-TITLE':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId].map(task => {\r\n                    return task.id === action.taskId\r\n                        ? {\r\n                            ...task,\r\n                            title: action.title\r\n                        }\r\n                        : task\r\n                })\r\n            }\r\n        case 'ADD-TODOLIST':\r\n            return {...state, [action.todolistId]: []}\r\n        case 'REMOVE-TODOLIST':\r\n            let copyState = {...state}\r\n            delete copyState[action.todolistId]\r\n            return copyState\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport const removeTaskAC = (taskId: string, todolistId: string): RemoveTaskActionType => {\r\n    return {type: 'REMOVE-TASK', taskId: taskId, todolistId: todolistId}\r\n}\r\nexport const addTaskAC = (title: string, todolistId: string): AddTaskActionType => {\r\n    return {type: 'ADD-TASK', title: title, todolistId: todolistId}\r\n}\r\nexport const changeTaskTitleAC = (taskId: string, title: string, todolistId: string): ChangeTaskTitleActionType => {\r\n    return {type: 'CHANGE-TASK-TITLE', taskId: taskId, title: title, todolistId: todolistId}\r\n}\r\nexport const changeTaskStatusAC = (taskId: string, isDone: boolean, todolistId: string): ChangeTaskStatusActionType => {\r\n    return {type: 'CHANGE-TASK-STATUS', taskId: taskId, isDone: isDone, todolistId: todolistId}\r\n}\r\n","import React, {useCallback} from 'react';\r\nimport '../App.css';\r\nimport {TaskType, Todolist} from \"./Todolist\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {MenuOpen} from \"@material-ui/icons\";\r\nimport {AddTodolistAC, ChangeTodolistFilterAC, ChangeTodolistTitleAC, RemoveTodolistAC,} from \"../state/todolists-reducer\";\r\nimport {addTaskAC, changeTaskStatusAC, changeTaskTitleAC, removeTaskAC} from \"../state/tasks-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../state/store\";\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed'\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    filter: string\r\n}\r\nexport type TaskStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nfunction AppWithRedux() {\r\n\r\n    // let todolist1 = v1()\r\n    // let todolist2 = v1()\r\n    // let [todolists, setTodolists] = useState<Array<TodolistType>>([\r\n    //     {id: todolist1, title: 'What to learn', filter: 'all'},\r\n    //     {id: todolist2, title: 'What to buy', filter: 'all'}\r\n    // ])\r\n    // let [tasks, setTasks] = useState<TaskStateType>({\r\n    //     [todolist1]: [\r\n    //         {id: v1(), title: 'HTML&CSS', isDone: true},\r\n    //         {id: v1(), title: 'JS', isDone: true},\r\n    //         {id: v1(), title: 'ReactJS', isDone: false},\r\n    //         {id: v1(), title: 'Rest API', isDone: true},\r\n    //         {id: v1(), title: 'GraphQL', isDone: true}\r\n    //     ],\r\n    //     [todolist2]: [\r\n    //         {id: v1(), title: 'Tea', isDone: true},\r\n    //         {id: v1(), title: 'Chocolate', isDone: true},\r\n    //     ]\r\n    // })\r\n\r\n    // let [todolists, dispatch] = useReducer(todolistsReducer, [\r\n    //     {id: todolist1, title: 'What to learn', filter: 'all'},\r\n    //     {id: todolist2, title: 'What to buy', filter: 'all'}\r\n    // ])\r\n    // let [tasks, dispatch] = useReducer(tasksReducer, {\r\n    //     [todolist1]: [\r\n    //         {id: v1(), title: 'HTML&CSS', isDone: true},\r\n    //         {id: v1(), title: 'JS', isDone: true},\r\n    //         {id: v1(), title: 'ReactJS', isDone: false},\r\n    //         {id: v1(), title: 'Rest API', isDone: true},\r\n    //         {id: v1(), title: 'GraphQL', isDone: true}\r\n    //     ],\r\n    //     [todolist2]: [\r\n    //         {id: v1(), title: 'Tea', isDone: true},\r\n    //         {id: v1(), title: 'Chocolate', isDone: true},\r\n    //     ]\r\n    // })\r\n\r\n    const todolists = useSelector<AppRootStateType,\r\n        Array<TodolistType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType,\r\n        TaskStateType>(state => state.tasks)\r\n    const dispatch = useDispatch()\r\n\r\n    const removeTodolist = useCallback((todolistId: string) => {\r\n        dispatch(RemoveTodolistAC(todolistId))\r\n    }, [dispatch])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const action = AddTodolistAC(title)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n\r\n    const changeTodolistTitle = useCallback((title: string, todolistId: string) => {\r\n        const action = ChangeTodolistTitleAC(title, todolistId)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n\r\n    const changeFilter = useCallback((value: FilterValuesType, todolistId: string) => {\r\n        const action = ChangeTodolistFilterAC(value, todolistId)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n\r\n    const removeTask = useCallback((taskId: string, todolistId: string) => {\r\n        const action = removeTaskAC(taskId, todolistId)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n\r\n    const addTask = useCallback((taskName: string, todolistId: string) => {\r\n        const action = addTaskAC(taskName, todolistId)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n\r\n    const changeTaskTitle = useCallback((id: string, title: string, todolistId: string) => {\r\n        const action = changeTaskTitleAC(id, title, todolistId)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n\r\n    const changeTaskStatus = useCallback((id: string, isDone: boolean, todolistId: string) => {\r\n        const action = changeTaskStatusAC(id, isDone, todolistId)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    {/*<IconButton edge=\"start\"*/}\r\n                    {/*    // className={classes.menuButton}*/}\r\n                    {/*            color=\"inherit\" aria-label=\"menu\">*/}\r\n                    {/*    <MenuOpen/>*/}\r\n                    {/*</IconButton>*/}\r\n                    <Typography variant=\"h6\"\r\n                        // className={classes.title}\r\n                    >\r\n                        Todolists\r\n                    </Typography>\r\n                    {/*<Button color=\"inherit\">Login</Button>*/}\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: '10px'}}>\r\n                    <AddItemForm addItem={addTodolist}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {\r\n                        todolists.map(todolist => {\r\n                            let tasksForTodolist = tasks[todolist.id]\r\n                            return <Grid item>\r\n                                <Paper style={{padding: '10px'}}>\r\n                                    <Todolist\r\n                                        key={todolist.id}\r\n                                        id={todolist.id}\r\n                                        title={todolist.title}\r\n                                        filter={todolist.filter}\r\n                                        removeTodolist={removeTodolist}\r\n                                        changeTodolistTitle={changeTodolistTitle}\r\n                                        tasks={tasksForTodolist}\r\n                                        removeTask={removeTask}\r\n                                        changeFilter={changeFilter}\r\n                                        addTask={addTask}\r\n                                        changeTaskStatus={changeTaskStatus}\r\n                                        changeTaskTitle={changeTaskTitle}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>\r\n                        })\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AppWithRedux\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import {tasksReducer} from './tasks-reducer';\r\nimport {todolistsReducer} from './todolists-reducer';\r\nimport {combineReducers, createStore} from 'redux';\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer);\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport AppWithRedux from './components/AppWithRedux';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./state/store\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <AppWithRedux/>\r\n    </Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}