{"version":3,"sources":["components/AddItemForm.tsx","components/EditedSpan.tsx","components/Task.tsx","api/task-api.ts","state/tasks-reducer.ts","components/Todolist.tsx","api/todolist-api.ts","state/todolists-reducer.ts","components/AppWithRedux.tsx","serviceWorker.ts","state/store.ts","index.tsx"],"names":["AddItemForm","React","memo","props","console","log","useState","title","setTitle","error","setError","onAddItem","trim","addItem","TextField","variant","value","onChange","event","currentTarget","onKeyPress","key","label","helperText","IconButton","color","onClick","AddBox","EditedSpan","editMode","setEditMode","activateViewMode","autoFocus","onBlur","changeTitle","Task","isDone","onClickHandler","useCallback","removeTask","taskId","todolistId","onChangeHandler","changeTaskStatus","target","checked","onChangeTaskTitle","changeTaskTitle","className","Checkbox","Delete","instance","axios","create","baseURL","withCredentials","headers","taskAPI","pageSize","pageNumber","get","post","delete","body","put","initialState","Todolist","dispatch","useDispatch","useEffect","id","then","res","action","tasks","type","setTasksAC","data","items","tasksForTodolist","onAddTask","addTask","onChangeTodolistTitle","changeTodolistTitle","onActiveClickHandler","changeFilter","onAllClickHandler","onCompletedClickHandler","filter","task","removeTodolist","map","Button","todolistAPI","addTodolistTC","v1","addTodolistAC","AppWithRedux","todolists","useSelector","state","addTodolist","removeTodolistAC","removeTodolistTC","changeTodolistTitleAC","changeTodolistTitleTC","changeTodolistFilterAC","removeTaskAC","removeTaskTC","item","addTaskAC","addTaskTC","getState","find","t","startDate","priority","description","deadline","status","changeTaskTitleAC","changeTaskTitleTC","changeTaskStatusAC","updateTaskStatusTC","AppBar","position","Toolbar","edge","aria-label","MenuOpen","Typography","Container","fixed","Grid","container","style","padding","spacing","todolist","Paper","Boolean","window","location","hostname","match","rootReducer","combineReducers","stateCopy","todoListId","forEach","tl","copyState","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.95f199d2.chunk.js","sourcesContent":["import React, {ChangeEvent, useState} from \"react\";\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {AddBox} from \"@material-ui/icons\";\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport const AddItemForm = React.memo(function (props: AddItemFormPropsType) {\r\n    // debugger\r\n    console.log('callAddItemForm')\r\n    let [title, setTitle] = useState('')\r\n    let [error, setError] = useState<string | null>(null)\r\n    const onAddItem = () => {\r\n        if (title.trim() !== '') {\r\n            props.addItem(title)\r\n            setTitle('')\r\n        } else {\r\n            setError('Title is required')\r\n        }\r\n    }\r\n    const onChangeHandler = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(event.currentTarget.value)\r\n    }\r\n    const onKeyPressHandler = (event: React.KeyboardEvent<HTMLInputElement>) => {\r\n        error !== null && setError(null)//?\r\n        event.key === 'Enter' && onAddItem()\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                error={!!error}\r\n                variant={'filled'}\r\n                value={title}\r\n                onChange={onChangeHandler}\r\n                onKeyPress={onKeyPressHandler}\r\n                label={'Title'}\r\n                helperText={error}\r\n            />\r\n            <IconButton\r\n                color={\"primary\"}\r\n                onClick={onAddItem}\r\n            >\r\n                <AddBox/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n})","import React, {ChangeEvent, useState} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\ntype EditedSpanPropsType = {\r\n    value: string\r\n    changeTitle: (title: string) => void\r\n}\r\n\r\nexport const EditedSpan = React.memo(function (props: EditedSpanPropsType) {\r\n    console.log('EditedSpan called')\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [title, setTitle] = useState(props.value)\r\n    let [error, setError] = useState<string | null>(null)\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n        setTitle(props.value)\r\n    }\r\n    const activateViewMode = () => {\r\n        if (title.trim() !== '') {\r\n            setEditMode(false)\r\n        } else {\r\n            setError('Title is required')\r\n        }\r\n    }\r\n    const onChangeHandler = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setError(null)\r\n        setTitle(event.currentTarget.value)\r\n        props.changeTitle(title)\r\n    }\r\n    const onKeyPressHandler = (event: React.KeyboardEvent<HTMLInputElement>) => {\r\n        event.key === 'Enter' && activateViewMode()\r\n    }\r\n    return editMode\r\n        ? <TextField\r\n            variant={'standard'}\r\n            value={title}\r\n            autoFocus onBlur={activateViewMode}\r\n            onKeyPress={onKeyPressHandler}\r\n            onChange={onChangeHandler}\r\n            error={!!error}\r\n            label={'Title'}\r\n            helperText={error}\r\n        />\r\n        : <span onClick={activateEditMode}>{props.value}</span>\r\n})","import React, {ChangeEvent, useCallback} from \"react\";\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {EditedSpan} from \"./EditedSpan\";\r\nimport {Delete} from \"@material-ui/icons\";\r\n\r\ntype TaskPropsType = {\r\n    taskId: string\r\n    title: string\r\n    isDone: undefined | boolean\r\n    todolistId: string\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    changeTaskStatus: (taskId: string, isDone: boolean, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, title: string, todolistId: string) => void\r\n}\r\n\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    console.log(\"Task called\" + \", \" + \"propsIsDone: \" + props.isDone)\r\n    const onClickHandler = useCallback(() => {\r\n        props.removeTask(props.taskId, props.todolistId)\r\n    }, [props.removeTask, props.taskId, props.todolistId])\r\n    const onChangeHandler = useCallback((event: ChangeEvent<HTMLInputElement>) => {\r\n        props.changeTaskStatus(props.taskId, event.target.checked, props.todolistId);\r\n    }, [props.taskId, props.todolistId, props.changeTaskStatus])\r\n    const onChangeTaskTitle = useCallback((title: string) => {\r\n        props.changeTaskTitle(props.taskId, title, props.todolistId)\r\n    }, [props.changeTaskTitle, props.taskId, props.todolistId])\r\n\r\n    return <div key={props.taskId}\r\n                className={props.isDone ? 'is-done' : ''}>\r\n        <Checkbox\r\n            color={\"primary\"}\r\n            checked={!props.isDone ? false : props.isDone}\r\n            onChange={onChangeHandler}\r\n        />\r\n        <EditedSpan value={props.title}\r\n                    changeTitle={onChangeTaskTitle}\r\n        />\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})","import axios from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/todo-lists/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '4e8292c6-4c6d-4090-bee7-d25c2ec782dd'\r\n    }\r\n})\r\n\r\n\r\nexport const taskAPI = {\r\n    getTasks(todolistId: string, pageSize: number, pageNumber: number) {\r\n        return instance.get(`${todolistId}/tasks?count=${pageSize}&page=${pageNumber}`)\r\n    },\r\n    postTask(todolistId: string, title: string) {\r\n        return instance.post(`${todolistId}/tasks`, {title: title})\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete(`${todolistId}/tasks/${taskId}`)\r\n    },\r\n    updateTask(todolistId: string, taskId: string, body: object) {\r\n        return instance.put(`${todolistId}/tasks/${taskId}`, body)\r\n    },\r\n}\r\n","import {TaskStateType} from '../components/App';\r\nimport {AddTodolistActionType, RemoveTodolistActionType, SetTodolistsActionType} from \"./todolists-reducer\";\r\nimport {TaskType} from \"../stories/tasks-api.stories\";\r\nimport {Dispatch} from \"redux\";\r\nimport {taskAPI} from \"../api/task-api\";\r\nimport {AppRootStateType} from \"./store\";\r\nimport {log} from \"util\";\r\n\r\nexport type SetTasksActionType = {\r\n    type: 'SET-TASKS'\r\n    tasks: Array<TaskType>\r\n    todolistId: string\r\n}\r\ntype RemoveTaskActionType = {\r\n    type: 'REMOVE-TASK',\r\n    taskId: string\r\n    todolistId: string\r\n}\r\ntype AddTaskActionType = {\r\n    type: 'ADD-TASK',\r\n    task: TaskType\r\n}\r\ntype ChangeTaskStatusActionType = {\r\n    type: 'CHANGE-TASK-STATUS',\r\n    taskId: string\r\n    isDone: boolean\r\n    todolistId: string\r\n}\r\ntype ChangeTaskTitleActionType = {\r\n    type: 'CHANGE-TASK-TITLE',\r\n    taskId: string\r\n    title: string\r\n    todolistId: string\r\n}\r\ntype ActionType =\r\n    SetTasksActionType | SetTodolistsActionType | RemoveTaskActionType\r\n    | AddTaskActionType | ChangeTaskStatusActionType | ChangeTaskTitleActionType\r\n    | AddTodolistActionType | RemoveTodolistActionType\r\n\r\nconst initialState: TaskStateType = {}\r\n\r\nexport const tasksReducer = (state: TaskStateType = initialState, action: ActionType) => {\r\n    switch (action.type) {\r\n        case 'SET-TASKS': {\r\n            const stateCopy = {...state}\r\n            // @ts-ignore\r\n            stateCopy[action.todolistId] = action.tasks\r\n            return stateCopy\r\n        }\r\n        case 'REMOVE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId]\r\n                    .filter(task => task.id !== action.taskId)\r\n            }\r\n        case 'ADD-TASK':\r\n            return {\r\n                ...state,\r\n                [action.task.todoListId]: [...state[action.task.todoListId],\r\n                    action.task]\r\n            }\r\n        case 'CHANGE-TASK-STATUS':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId].map(task => {\r\n                    return task.id === action.taskId\r\n                        ? {\r\n                            ...task,\r\n                            isDone: action.isDone\r\n                        }\r\n                        : task\r\n                })\r\n            }\r\n        case 'CHANGE-TASK-TITLE':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId].map(task => {\r\n                    return task.id === action.taskId\r\n                        ? {\r\n                            ...task,\r\n                            title: action.title\r\n                        }\r\n                        : task\r\n                })\r\n            }\r\n        case 'SET-TODOLISTS':\r\n            const stateCopy = {...state}\r\n            action.todolists.forEach((tl) => {\r\n                stateCopy[tl.id] = []\r\n            })\r\n            return stateCopy;\r\n        case 'ADD-TODOLIST':\r\n            return {...state, [action.todolistId]: []}\r\n        case 'REMOVE-TODOLIST':\r\n            let copyState = {...state}\r\n            delete copyState[action.todolistId]\r\n            return copyState\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string): SetTasksActionType => {\r\n    return {type: 'SET-TASKS', tasks, todolistId}\r\n}\r\nexport const fetchTasksTC = (todolistId: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        taskAPI.getTasks(todolistId, 30, 1)\r\n            .then((res) => {\r\n                const tasks = res.data.items\r\n                const action = setTasksAC(tasks, todolistId)\r\n                dispatch(action)\r\n            })\r\n    }\r\n}\r\nexport const addTaskAC = (task: TaskType): AddTaskActionType => {\r\n    return {type: 'ADD-TASK', task}\r\n}\r\nexport const addTaskTC = (title: string, todolistId: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        taskAPI.postTask(todolistId, title)\r\n            .then((res) => {\r\n                console.log(res.data.data.item)\r\n                const task = res.data.data.item\r\n                const action = addTaskAC(task)\r\n                dispatch(action)\r\n            })\r\n    }\r\n}\r\nexport const removeTaskAC = (taskId: string, todolistId: string): RemoveTaskActionType => {\r\n    return {type: 'REMOVE-TASK', taskId: taskId, todolistId: todolistId}\r\n}\r\nexport const removeTaskTC = (todolistId: string, taskId: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        taskAPI.deleteTask(todolistId, taskId)\r\n            .then(() => {\r\n                const action = removeTaskAC(taskId, todolistId)\r\n                dispatch(action)\r\n            })\r\n    }\r\n}\r\nexport const changeTaskTitleAC = (taskId: string, title: string, todolistId: string): ChangeTaskTitleActionType => {\r\n    return {type: 'CHANGE-TASK-TITLE', taskId: taskId, title: title, todolistId: todolistId}\r\n}\r\nexport const changeTaskTitleTC = (taskId: string, title: string, todolistId: string) => {\r\n    return (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n        // @ts-ignore\r\n        const task = getState().tasks[todolistId].find(t => t.id === taskId)\r\n        if (task) {\r\n            taskAPI.updateTask(todolistId, taskId, {\r\n                title: title,\r\n                startDate: task.startDate,\r\n                priority: task.priority,\r\n                description: task.description,\r\n                deadline: task.deadline,\r\n                status: task.isDone\r\n            }).then((res) => {\r\n                console.log(res.data.data.item.title)\r\n                dispatch(changeTaskTitleAC(taskId, title, todolistId))\r\n            })\r\n        }\r\n    }\r\n}\r\nexport const changeTaskStatusAC = (taskId: string, isDone: boolean, todolistId: string): ChangeTaskStatusActionType => {\r\n    return {type: 'CHANGE-TASK-STATUS', taskId: taskId, isDone: isDone, todolistId: todolistId}\r\n}\r\nexport const updateTaskStatusTC = (taskId: string, isDone: boolean, todolistId: string) => {\r\n    return (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n        // @ts-ignore\r\n        const task = getState().tasks[todolistId].find(t => t.id === taskId)\r\n        if (task) {\r\n            taskAPI.updateTask(todolistId, taskId, {\r\n                title: task.title,\r\n                startDate: task.startDate,\r\n                priority: task.priority,\r\n                description: task.description,\r\n                deadline: task.deadline,\r\n                status: isDone\r\n            }).then((res) => {\r\n                // let isDone = res.data.data.item.status === 1\r\n                dispatch(changeTaskStatusAC(taskId, isDone, todolistId)) //значения брать из ответа | f\r\n            })\r\n        }\r\n    }\r\n}\r\n","import React, {useCallback, useEffect} from \"react\";\r\nimport {FilterValuesType} from \"./App\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {EditedSpan} from \"./EditedSpan\";\r\nimport {Button, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {Task} from \"./Task\";\r\nimport {fetchTasksTC} from \"../state/tasks-reducer\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: undefined | boolean\r\n}\r\n\r\nexport type PropsType = {\r\n    id: string\r\n    title: string\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (title: string, id: string) => void\r\n    tasks: Array<TaskType>\r\n    addTask: (title: string, id: string) => void\r\n    removeTask: (taskId: string, id: string) => void\r\n    changeTaskStatus: (taskId: string, isDone: boolean, id: string) => void\r\n    changeTaskTitle: (taskId: string, title: string, id: string) => void\r\n    filter: string\r\n    changeFilter: (value: FilterValuesType, id: string) => void\r\n}\r\n\r\nexport const Todolist = React.memo(function (props: PropsType) {\r\n        console.log(\"Todolist called\")\r\n        const dispatch = useDispatch()\r\n        useEffect(() => {\r\n            dispatch(fetchTasksTC(props.id))\r\n        }, [])\r\n        const onAddTask = useCallback((title: string) => {\r\n            props.addTask(title, props.id)\r\n        }, [props.addTask, props.id])\r\n        const onRemoveTodolist = () => props.removeTodolist(props.id)\r\n        const onChangeTodolistTitle = useCallback((title: string) => {\r\n            props.changeTodolistTitle(title, props.id)\r\n        }, [props.changeTodolistTitle, props.id])\r\n\r\n        const onActiveClickHandler = useCallback(() => {\r\n            props.changeFilter('active', props.id)\r\n        }, [props.changeFilter, props.id])\r\n        const onAllClickHandler = useCallback(() => {\r\n            props.changeFilter('all', props.id)\r\n        }, [props.changeFilter, props.id])\r\n        const onCompletedClickHandler = useCallback(() => {\r\n            props.changeFilter('completed', props.id)\r\n        }, [props.changeFilter, props.id])\r\n\r\n        let tasksForTodolist: Array<TaskType>\r\n        props.filter === 'active'\r\n            ? tasksForTodolist = props.tasks.filter(task => !task.isDone)\r\n            : props.filter === 'completed'\r\n            ? tasksForTodolist = props.tasks.filter(task => task.isDone)\r\n            : tasksForTodolist = props.tasks\r\n        return (\r\n            <div>\r\n                <div>\r\n                    <h3>\r\n                        <EditedSpan value={props.title}\r\n                                    changeTitle={onChangeTodolistTitle}\r\n                        />\r\n                        <IconButton onClick={onRemoveTodolist}>\r\n                            <Delete/>\r\n                        </IconButton>\r\n                    </h3>\r\n                </div>\r\n                <AddItemForm addItem={onAddTask}/>\r\n                {\r\n                    tasksForTodolist.map(task => {\r\n                        return <Task\r\n                            key={task.id}\r\n                            taskId={task.id}\r\n                            title={task.title}\r\n                            isDone={task.isDone}\r\n                            removeTask={props.removeTask}\r\n                            changeTaskStatus={props.changeTaskStatus}\r\n                            changeTaskTitle={props.changeTaskTitle}\r\n                            todolistId={props.id}\r\n                        />\r\n                    })\r\n                }\r\n                <div>\r\n                    <Button\r\n                        variant={props.filter === 'all' ? 'outlined' : 'text'}\r\n                        onClick={onAllClickHandler}\r\n                        color={\"default\"}\r\n                    >All\r\n                    </Button>\r\n                    <Button\r\n                        variant={props.filter === 'active' ? 'outlined' : 'text'}\r\n                        onClick={onActiveClickHandler}\r\n                        color={\"primary\"}\r\n                    >Active\r\n                    </Button>\r\n                    <Button\r\n                        variant={props.filter === 'completed' ? 'outlined' : 'text'}\r\n                        onClick={onCompletedClickHandler}\r\n                        color={\"secondary\"}\r\n                    >Completed\r\n                    </Button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n)\r\n","import axios from 'axios'\r\n\r\nexport type TodolistType = {\r\n    id: string\r\n    addedDate: string\r\n    order: number\r\n    title: string\r\n}\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/todo-lists/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '4e8292c6-4c6d-4090-bee7-d25c2ec782dd'\r\n    }\r\n})\r\n\r\n\r\nexport const todolistAPI = {\r\n    updateTodolist(todolistId: string, title: string) {\r\n        return instance.put(`${todolistId}`, {title: title})\r\n    },\r\n    deleteTodolist(todolistId: string) {\r\n        return instance.delete(`${todolistId}`)\r\n    },\r\n    postTodolist(title: string) {\r\n        return instance.post('', {title: title})\r\n    },\r\n    getTodolists() {\r\n        return instance.get<Array<TodolistType>>('')\r\n    },\r\n\r\n}\r\n","import {FilterValuesType, TodolistType} from \"../components/App\";\r\nimport {v1} from \"uuid\";\r\nimport {todolistAPI} from \"../api/todolist-api\";\r\nimport {Dispatch} from \"redux\";\r\n\r\nexport type RemoveTodolistActionType = {\r\n    type: 'REMOVE-TODOLIST',\r\n    todolistId: string\r\n}\r\nexport type AddTodolistActionType = {\r\n    type: 'ADD-TODOLIST',\r\n    title: string\r\n    todolistId: string\r\n}\r\nexport type SetTodolistsActionType = {\r\n    type: 'SET-TODOLISTS'\r\n    todolists: Array<TodolistType>\r\n}\r\n\r\ntype ChangeTodolistTitleActionType = {\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    title: string\r\n    id: string\r\n}\r\ntype ChangeTodolistFilterActionType = {\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    filter: FilterValuesType\r\n    id: string\r\n}\r\ntype ActionType = SetTodolistsActionType | RemoveTodolistActionType\r\n    | AddTodolistActionType | ChangeTodolistTitleActionType\r\n    | ChangeTodolistFilterActionType\r\n\r\nconst initialState: Array<TodolistType> = []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistType> = initialState, action: ActionType) => {\r\n    switch (action.type) {\r\n        case 'SET-TODOLISTS':\r\n            return action.todolists.map(tl => ({\r\n                ...tl,\r\n                filter: 'all'\r\n            }))\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(todolist => todolist.id !== action.todolistId)\r\n        case 'ADD-TODOLIST':\r\n            return [...state, {\r\n                id: action.todolistId,\r\n                title: action.title,\r\n                filter: \"all\"\r\n            }]\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(todolist => {\r\n                if (todolist.id === action.id) {\r\n                    return {\r\n                        ...todolist,\r\n                        title: action.title\r\n                    }\r\n                } else return todolist\r\n            })\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            let todolist = state.find(todolist => todolist.id === action.id)\r\n            if (todolist) {\r\n                todolist.filter = action.filter\r\n            }\r\n            return [...state]   //как в копии стейта изменился фильтр\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>): SetTodolistsActionType => {\r\n    return {type: 'SET-TODOLISTS', todolists}\r\n}\r\nexport const fetchTodolistsTC = () => (dispatch: Dispatch) => {\r\n    todolistAPI.getTodolists()\r\n        .then((res) => {\r\n            // @ts-ignore\r\n            dispatch(setTodolistsAC(res.data))\r\n        })\r\n}\r\nexport const removeTodolistAC = (todolistId: string): RemoveTodolistActionType => {\r\n    return {type: 'REMOVE-TODOLIST', todolistId: todolistId}\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => (dispatch: Dispatch) => {\r\n    todolistAPI.deleteTodolist(todolistId)\r\n        .then(() => {\r\n            dispatch(removeTodolistAC(todolistId))\r\n        })\r\n}\r\nexport const addTodolistAC = (title: string): AddTodolistActionType => {\r\n    return {type: 'ADD-TODOLIST', title: title, todolistId: v1()}\r\n}\r\nexport const addTodolistTC = (title: string) => (dispatch: Dispatch) => {\r\n    todolistAPI.postTodolist(title)\r\n        .then(() => {\r\n            dispatch(addTodolistAC(title))\r\n        })\r\n}\r\nexport const changeTodolistTitleAC = (title: string, todolistId: string): ChangeTodolistTitleActionType => {\r\n    return {type: 'CHANGE-TODOLIST-TITLE', title: title, id: todolistId}\r\n}\r\nexport const changeTodolistTitleTC = (title: string, todolistId: string) => (dispatch: Dispatch) => {\r\n    todolistAPI.updateTodolist(todolistId, title)\r\n        .then(() => {\r\n            dispatch(changeTodolistTitleAC(title, todolistId))\r\n        })\r\n}\r\nexport const changeTodolistFilterAC = (filter: FilterValuesType, todolistId: string): ChangeTodolistFilterActionType => {\r\n    return {type: 'CHANGE-TODOLIST-FILTER', id: todolistId, filter: filter}\r\n}\r\n","import React, {useCallback, useEffect} from 'react';\r\nimport '../App.css';\r\nimport {TaskType, Todolist} from \"./Todolist\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {MenuOpen} from \"@material-ui/icons\";\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC, fetchTodolistsTC, removeTodolistTC,\r\n} from \"../state/todolists-reducer\";\r\nimport {\r\n    addTaskTC,\r\n    updateTaskStatusTC,\r\n    removeTaskTC, changeTaskTitleTC,\r\n} from \"../state/tasks-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../state/store\";\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed'\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    filter: string\r\n}\r\nexport type TaskStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nfunction AppWithRedux() {\r\n\r\n    const todolists = useSelector<AppRootStateType,\r\n        Array<TodolistType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType,\r\n        TaskStateType>(state => state.tasks)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchTodolistsTC())\r\n    }, [dispatch])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const action = addTodolistTC(title)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n    const removeTodolist = useCallback((todolistId: string) => {\r\n        dispatch(removeTodolistTC(todolistId))\r\n    }, [dispatch])\r\n    const changeTodolistTitle = useCallback((title: string, todolistId: string) => {\r\n        const action = changeTodolistTitleTC(title, todolistId)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n    const changeFilter = useCallback((value: FilterValuesType, todolistId: string) => {\r\n        const action = changeTodolistFilterAC(value, todolistId)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n\r\n    const removeTask = useCallback((taskId: string, todolistId: string) => {\r\n        dispatch(removeTaskTC(todolistId, taskId))\r\n    }, [dispatch])\r\n    const addTask = useCallback((title: string, todolistId: string) => {\r\n        dispatch(addTaskTC(title, todolistId))\r\n    }, [dispatch])\r\n    const changeTaskTitle = useCallback((id: string, title: string, todolistId: string) => {\r\n        const action = changeTaskTitleTC(id, title, todolistId)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n    const changeTaskStatus = useCallback((id: string, isDone: boolean, todolistId: string) => {\r\n        const action = updateTaskStatusTC(id, isDone, todolistId)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\"\r\n                        // className={classes.menuButton}\r\n                                color=\"inherit\" aria-label=\"menu\">\r\n                        <MenuOpen/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\"\r\n                        // className={classes.title}\r\n                    >\r\n                        Todolists\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: '10px'}}>\r\n                    <AddItemForm addItem={addTodolist}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {\r\n                        todolists.map(todolist => {\r\n                            let tasksForTodolist = tasks[todolist.id]\r\n                            return <Grid item>\r\n                                <Paper style={{padding: '10px'}}>\r\n                                    <Todolist\r\n                                        key={todolist.id}\r\n                                        id={todolist.id}\r\n                                        title={todolist.title}\r\n                                        filter={todolist.filter}\r\n                                        removeTodolist={removeTodolist}\r\n                                        changeTodolistTitle={changeTodolistTitle}\r\n                                        tasks={tasksForTodolist}\r\n                                        removeTask={removeTask}\r\n                                        changeFilter={changeFilter}\r\n                                        addTask={addTask}\r\n                                        changeTaskStatus={changeTaskStatus}\r\n                                        changeTaskTitle={changeTaskTitle}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>\r\n                        })\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AppWithRedux\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {tasksReducer} from './tasks-reducer';\r\nimport {todolistsReducer} from './todolists-reducer';\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport thunk from \"redux-thunk\";\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport AppWithRedux from './components/AppWithRedux';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./state/store\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <AppWithRedux/>\r\n    </Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}